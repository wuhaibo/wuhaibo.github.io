<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node.js export</title>
      <link href="2021/08/10/node-js-export/"/>
      <url>2021/08/10/node-js-export/</url>
      
        <content type="html"><![CDATA[<p>The <code>module.exports</code> is a special object which is included in every JavaScript file in the Node.js application by default. The <code>module</code> is a variable that represents the current module, and <code>exports</code> is an object that will be exposed as a module. So, whatever you assign to <code>module.exports</code> will be exposed as a module.</p><h3 id="Export-function"><a href="#Export-function" class="headerlink" title="Export function"></a>Export function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.debug = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[debug]: &quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;./log&#x27;</span>)</span><br><span class="line">log.debug(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Export-object"><a href="#Export-object" class="headerlink" title="Export object"></a>Export object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = &#123;&#125;</span><br><span class="line">logger.debug = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[debug]: &quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logger</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;./log&#x27;</span>)</span><br><span class="line">log.debug(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Use-only-part-of-the-exported-object"><a href="#Use-only-part-of-the-exported-object" class="headerlink" title="Use only part of the exported object"></a>Use only part of the exported object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = &#123;&#125;</span><br><span class="line">logger.debug = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[debug]: &quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.error = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">module</span>.<span class="title">exports</span> = <span class="title">logger</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">app</span>.<span class="title">js</span></span></span><br><span class="line"><span class="function"><span class="title">const</span> </span>&#123; error &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./log&#x27;</span>)</span><br><span class="line">error(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="If-name-confliction"><a href="#If-name-confliction" class="headerlink" title="If name confliction"></a>If name confliction</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// log.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = &#123;&#125;</span><br><span class="line">logger.debug = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;[debug]: &quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.error = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">module</span>.<span class="title">exports</span> = <span class="title">logger</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">app</span>.<span class="title">js</span></span></span><br><span class="line"><span class="function"><span class="title">const</span> </span>&#123; error: logError &#125; = <span class="built_in">require</span>(<span class="string">&quot;./hbUtils&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> error = <span class="string">&quot;error here&quot;</span>;</span><br><span class="line"></span><br><span class="line">logError(error);</span><br></pre></td></tr></table></figure><h3 id="Export-class"><a href="#Export-class" class="headerlink" title="Export class"></a>Export class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">firstname, lastname</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstname = firstname;</span><br><span class="line">    <span class="built_in">this</span>.lastname = lastname;</span><br><span class="line">  &#125;</span><br><span class="line">  getFullname = <span class="function">() =&gt;</span> [<span class="built_in">this</span>.firstname, <span class="built_in">this</span>.lastname].join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Student = <span class="built_in">require</span>(<span class="string">&quot;./student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> williamwood = <span class="keyword">new</span> Student(<span class="string">&quot;william&quot;</span>, <span class="string">&quot;wood&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(williamwood.getFullname());</span><br></pre></td></tr></table></figure><h3 id="Export-function-as-class"><a href="#Export-function-as-class" class="headerlink" title="Export function as class"></a>Export function as class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// student.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">firstname, lastname</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.firstname = firstname;</span><br><span class="line">  <span class="built_in">this</span>.lastname = lastname;</span><br><span class="line">  <span class="built_in">this</span>.getFullname = <span class="function">() =&gt;</span> [<span class="built_in">this</span>.firstname, <span class="built_in">this</span>.lastname].join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Student = <span class="built_in">require</span>(<span class="string">&quot;./student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> williamwood = <span class="keyword">new</span> Student(<span class="string">&quot;william&quot;</span>, <span class="string">&quot;wood&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(williamwood.getFullname());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> export </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2 cheet sheet</title>
      <link href="2021/07/28/pm2-cheet-sheet/"/>
      <url>2021/07/28/pm2-cheet-sheet/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Fork mode</span></span><br><span class="line">pm2 start app.js --name my-api # Name process</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Cluster mode</span></span><br><span class="line">pm2 start app.js -i 0        # Will start maximum processes with LB depending on available CPUs</span><br><span class="line">pm2 start app.js -i max      # Same as above, but deprecated.</span><br><span class="line">pm2 scale app +3             # Scales `app` up by 3 workers</span><br><span class="line">pm2 scale app 2              # Scales `app` up or down to 2 workers total</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Listing</span></span><br><span class="line"></span><br><span class="line">pm2 list               # Display all processes status</span><br><span class="line">pm2 jlist              # Print process list in raw JSON</span><br><span class="line">pm2 prettylist         # Print process list in beautified JSON</span><br><span class="line"></span><br><span class="line">pm2 describe 0         # Display all informations about a specific process</span><br><span class="line"></span><br><span class="line">pm2 monit              # Monitor all processes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Logs</span></span><br><span class="line"></span><br><span class="line">pm2 logs [--raw]       # Display all processes logs in streaming</span><br><span class="line">pm2 flush              # Empty all log files</span><br><span class="line">pm2 reloadLogs         # Reload all logs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Actions</span></span><br><span class="line"></span><br><span class="line">pm2 stop all           # Stop all processes</span><br><span class="line">pm2 restart all        # Restart all processes</span><br><span class="line"></span><br><span class="line">pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)</span><br><span class="line"></span><br><span class="line">pm2 stop 0             # Stop specific process id</span><br><span class="line">pm2 restart 0          # Restart specific process id</span><br><span class="line"></span><br><span class="line">pm2 delete 0           # Will remove process from pm2 list</span><br><span class="line">pm2 delete all         # Will remove all processes from pm2 list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Misc</span></span><br><span class="line"></span><br><span class="line">pm2 reset &lt;process&gt;    # Reset meta data (restarted time...)</span><br><span class="line">pm2 updatePM2          # Update in memory pm2</span><br><span class="line">pm2 ping               # Ensure pm2 daemon has been launched</span><br><span class="line">pm2 sendSignal SIGUSR2 my-app # Send system signal to script</span><br><span class="line">pm2 start app.js --no-daemon</span><br><span class="line">pm2 start app.js --no-vizion</span><br><span class="line">pm2 start app.js --no-autorestart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pm2 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose file for a container which shares volume between host and container</title>
      <link href="2021/07/08/docker-compose-file-for-a-container-which-shares-volume-between-host-and-container/"/>
      <url>2021/07/08/docker-compose-file-for-a-container-which-shares-volume-between-host-and-container/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Here we want to create a docker-compose file which build a local docker image and run the container which share a data volume with host. Source code could be found <a href="https://github.com/wuhaibo/dockerComposeExample">here</a>.</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>We create here a very simple python container which writes to a file every second.  </p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/usr/local/bin/python&quot;</span>,<span class="string">&quot;/app/main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><p>In docker compose we simply create a service called monitor and a data volume shared between host and container. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2.0&quot;</span><br><span class="line">services:</span><br><span class="line">  monitor:</span><br><span class="line">    container_name: docker-compose-example-container</span><br><span class="line">    build: .</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/docker-share:/var/docker-share</span><br></pre></td></tr></table></figure><h2 id="Deploy-to-Server"><a href="#Deploy-to-Server" class="headerlink" title="Deploy to Server"></a>Deploy to Server</h2><ul><li>First make sure docker and docker-compose are installed on server. We use Ubuntu.</li><li>Upload all files to server</li><li>run following cmd to build and start the container in background</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build image before start container and run the container in background</span></span><br><span class="line">sudo docker-compose up --build -d </span><br><span class="line"></span><br><span class="line"><span class="comment"># stop service/container, monitor is the service name in docker-compose.yml</span></span><br><span class="line">sudo docker-compose stop monitor </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linq</title>
      <link href="2021/07/08/linq/"/>
      <url>2021/07/08/linq/</url>
      
        <content type="html"><![CDATA[<h2 id="1-do-not-try-to-join-list-and-database-table-use-where-in-instead"><a href="#1-do-not-try-to-join-list-and-database-table-use-where-in-instead" class="headerlink" title="1. do not try to join list and database table. use where in instead."></a>1. do not try to join list and database table. use where in instead.</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inq = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1683</span>,<span class="number">1684</span>,<span class="number">1685</span>,<span class="number">1686</span>,<span class="number">1687</span>,<span class="number">1688</span>,<span class="number">1688</span>,<span class="number">1689</span>,<span class="number">1690</span>,<span class="number">1691</span>,<span class="number">1692</span>,<span class="number">1693</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">from</span> Q <span class="keyword">in</span> db.Requirements <span class="comment">// db.Requiremetns is a table from db</span></span><br><span class="line">             <span class="keyword">where</span> inq.Contains(Q.ID) <span class="comment">// a in function</span></span><br><span class="line">             <span class="keyword">orderby</span> Q.Description</span><br><span class="line">             <span class="keyword">select</span> Q;</span><br></pre></td></tr></table></figure><h2 id="2-linq-join"><a href="#2-linq-join" class="headerlink" title="2 linq join"></a>2 linq join</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from ... in outerSequence</span></span><br><span class="line"><span class="comment">// join ... in innerSequence  </span></span><br><span class="line"><span class="comment">// on outerKey equals innerKey</span></span><br><span class="line"><span class="comment">// select ...</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> customer <span class="keyword">in</span> customers</span><br><span class="line"><span class="keyword">join</span> order <span class="keyword">in</span> orders </span><br><span class="line">  <span class="keyword">on</span> order.customer_id <span class="keyword">equals</span> customer.id</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> </span><br><span class="line">&#123;</span><br><span class="line">  customer.id,</span><br><span class="line">  order.id</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>3 linq to entity show sql query </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Database.Log = s =&gt; System.Diagnostics.Debug.WriteLine(s);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linq </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多因子投資分析</title>
      <link href="2021/07/02/%E5%A4%9A%E5%9B%A0%E5%AD%90%E6%8A%95%E8%B3%87%E5%88%86%E6%9E%90/"/>
      <url>2021/07/02/%E5%A4%9A%E5%9B%A0%E5%AD%90%E6%8A%95%E8%B3%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>多因子投資認爲股票的盈利情況可以被因子描述成一個綫性關係。</p><p>這裏先對市值，市銷率，股息，市盈率，市净率這些因子和盈利之間的關係做一個簡單的分析。</p><p>爲了獲取這些因子，本文用tushare獲取了20180726的滬深股票的這些因子的數值，代碼如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">獲取了在trade_date 這天的indicator數據</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_daily_indicator</span>(<span class="params">trade_date=<span class="string">&#x27;20180726&#x27;</span>, ticker=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    pro = ts.pro_api(token)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># daily indicators</span></span><br><span class="line">    indicatiors = <span class="string">&#x27;ts_code,trade_date,close,turnover_rate,turnover_rate_f,&#x27;</span>\</span><br><span class="line">    <span class="string">&quot;volume_ratio,pe,pe_ttm,pb,ps,ps_ttm,dv_ratio,dv_ttm,total_share,float_share,&quot;</span>\</span><br><span class="line">    <span class="string">&quot;free_share,total_mv,circ_mv&quot;</span></span><br><span class="line">    df = pro.daily_basic(ts_code=ticker, trade_date=trade_date,</span><br><span class="line">        fields=indicatiors)</span><br><span class="line">    <span class="comment">#print(df)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><p>滬深股票的盈利數據，本文采用了2018至2020的每年盈利，並求了個平均作爲盈利數據。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_yearly_profit</span>(<span class="params">ticker,year</span>):</span></span><br><span class="line">    pro = ts.pro_api(token)</span><br><span class="line">    df = pro.monthly(ts_code=ticker,start_date=year + <span class="string">&#x27;0101&#x27;</span>,</span><br><span class="line">        end_date=year + <span class="string">&#x27;1230&#x27;</span>,fields=<span class="string">&#x27;close&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(df[&#x27;close&#x27;][0])</span></span><br><span class="line">    <span class="comment">#print(df[&#x27;close&#x27;][len(df[&#x27;close&#x27;])-1])</span></span><br><span class="line">    <span class="keyword">return</span> df[<span class="string">&#x27;close&#x27;</span>][<span class="built_in">len</span>(df[<span class="string">&#x27;close&#x27;</span>])-<span class="number">1</span>] / df[<span class="string">&#x27;close&#x27;</span>][<span class="number">0</span>]  - <span class="number">1</span> </span><br></pre></td></tr></table></figure><p>最後利用他們和盈利的關係得到以下一些圖。</p><p><img src="https://res.cloudinary.com/dr8wkuoot/image/upload/v1625394370/blog/factor_profit_mfyj2z.jpg" title="因子和盈利關係"></p><p>結論：</p><p>平均每年收益率在100%的股票其市值的log 在5  至6.5閒，市銷率在10以下，股息率在1.5以下，</p><p>市盈率在75以下，市净率在6以下</p><p>同時必須注意這個區域的股票也是有一定虧損的幾率的。</p>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多因子投資，市值，市銷率，股息，市盈率，市净率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>歷史波動率</title>
      <link href="2021/06/24/%E6%AD%B7%E5%8F%B2%E6%B3%A2%E5%8B%95%E7%8E%87/"/>
      <url>2021/06/24/%E6%AD%B7%E5%8F%B2%E6%B3%A2%E5%8B%95%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>歷史波動率是一種衡量股價波動率的方法，其計算方法類似于估計標的資產收益的標準差</p><h2 id="計算方法"><a href="#計算方法" class="headerlink" title="計算方法"></a>計算方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">anual_historic_volatility</span>(<span class="params">price</span>):</span></span><br><span class="line">    TRADING_DAYS = <span class="number">252</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(price,pd.Series):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;price must be dataframe&#x27;</span>)</span><br><span class="line">    price_trace = price.tail(TRADING_DAYS)</span><br><span class="line">    returns = np.log(price_trace/price_trace.shift(-<span class="number">1</span>))</span><br><span class="line">    returns.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    volatility = returns.rolling(window=TRADING_DAYS).std()*np.sqrt(TRADING_DAYS)</span><br><span class="line">    <span class="built_in">print</span>(volatility.tail(<span class="number">1</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>納斯達克結果在這裏 <a href="https://docs.google.com/spreadsheets/d/1lCBMsgTTBJXaJ_GqWZBt4AjBNQ-gRQDcwNVpbqnuXH0/edit#gid=0">https://docs.google.com/spreadsheets/d/1lCBMsgTTBJXaJ_GqWZBt4AjBNQ-gRQDcwNVpbqnuXH0/edit#gid=0</a></p><p>ref: <a href="https://wiki.mbalib.com/wiki/%E5%8E%86%E5%8F%B2%E6%B3%A2%E5%8A%A8%E7%8E%87">https://wiki.mbalib.com/wiki/%E5%8E%86%E5%8F%B2%E6%B3%A2%E5%8A%A8%E7%8E%87</a></p>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歷史波動率，history volatility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSI 策略</title>
      <link href="2021/06/23/rsi-%E7%AD%96%E7%95%A5/"/>
      <url>2021/06/23/rsi-%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>RSI（relative strength index）相對强弱指數，是通过比较一段时期内的平均收盘涨数和平均收盘跌数来分析市场买沽盘的意向和实力，从而作出未来市场的走势。</p><h2 id="計算"><a href="#計算" class="headerlink" title="計算"></a>計算</h2><p>RSI＝[<strong>上升平均数</strong>÷(<strong>上升平均数</strong>＋<strong>下跌平均数</strong>)]×100</p><p><strong>上升平均数：</strong>是在某一段日子里升幅数的平均</p><p><strong>下跌平均数：</strong> 是在同一段日子里跌幅数的平均。</p><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><ul><li><p>强弱指标保持<strong>高于</strong>50表示为<strong>强勢</strong>市場<br>强弱指标保持<strong>低于</strong>50表示为<strong>弱勢</strong>市場</p></li><li><p>每种类型股票的超卖超买值是<strong>不同</strong>的</p></li><li><p>策略</p><p>＞70賣</p><p>＜30買</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buy_sig</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> self.rsi[<span class="number">0</span>] &lt; <span class="number">30</span> <span class="keyword">and</span> self.rsi[-<span class="number">1</span>] &gt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sell_sig</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.rsi[<span class="number">0</span>] &gt; <span class="number">70</span> <span class="keyword">and</span> self.rsi[-<span class="number">1</span>] &lt; <span class="number">70</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>該策略對納斯達克100股票進行了測試，結果在<a href="https://docs.google.com/spreadsheets/d/1tK3nWFvf8Hd2K7yMbgOYC6Bc-I62ZUGoMORf2akz0zU/edit#gid=0">https://docs.google.com/spreadsheets/d/1tK3nWFvf8Hd2K7yMbgOYC6Bc-I62ZUGoMORf2akz0zU/edit#gid=0</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD 長命令換行</title>
      <link href="2021/06/23/cmd-%E9%95%B7%E5%91%BD%E4%BB%A4%E6%8F%9B%E8%A1%8C/"/>
      <url>2021/06/23/cmd-%E9%95%B7%E5%91%BD%E4%BB%A4%E6%8F%9B%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>在cmd脚本中为了便于阅读会分成多行来写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ec^</span><br><span class="line">ho hello world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MACD</title>
      <link href="2021/06/20/macd/"/>
      <url>2021/06/20/macd/</url>
      
        <content type="html"><![CDATA[<h1 id="MACD-學習"><a href="#MACD-學習" class="headerlink" title="MACD 學習"></a>MACD 學習</h1><h2 id="MACD-簡介"><a href="#MACD-簡介" class="headerlink" title="MACD 簡介"></a>MACD 簡介</h2><h3 id="MACD-計算"><a href="#MACD-計算" class="headerlink" title="MACD 計算"></a>MACD 計算</h3><ul><li><p><strong>差離值：DIF</strong>值</p><p>DIF = EMA(close,12) - EMA(close,26)</p></li><li><p>訊號綫：DEM或者<strong>MACD</strong></p><p>DEM = EMA(dif, 9)</p></li><li><p>直方圖：<strong>Histogram</strong> / bar graph</p><p>BAR/OSC = DIF - DEM/MACD</p><p>差離值（DIF）形成「<strong>快線</strong>」，訊號線（DEM）形成「<strong>慢線</strong>」。若股價持續上漲，DIF 值為正，且愈來愈大；若股價持續下跌，DIF 值為負，且負的程度愈來愈大。 </p></li></ul><h3 id="MACD-解讀"><a href="#MACD-解讀" class="headerlink" title="MACD 解讀"></a>MACD 解讀</h3><p>MACD是一種趨勢分析指標，不宜同時分析不同的市場環境。以下為交易訊號：  </p><ul><li><strong>交易訊號1:</strong> <br>差离值由下而上穿过零轴代表市场气氛<strong>利好股价</strong>，相反由上而下则代表<strong>利淡股价</strong>。<br>差离值与讯号线均在零轴上方时，被称为多头市场，反之，则被称为空头市场。 </li><li><strong>交易訊號2:</strong> <br>當差離值（DIF）從下而上穿過訊號線（DEM），這個時候<strong>棒形圖由負變正</strong>，為<strong>買進</strong>訊號；<br>相反若從上而下穿越，為<strong>賣出</strong>訊號。這個時候棒形圖<strong>由正變負</strong>。 <br>買賣訊號可能出現頻繁，需要配合其他指標（如：RSI、KD）一同分析。</li><li><strong>交易訊號3:</strong> <br>DIF 值與 MACD 值在0軸線上，代表市場為牛市，若兩者皆在0軸線之下，代表市場為熊市。 <br>DIF 值若向上突破 MACD 值及0 軸線，為<strong>買進</strong>訊號，不過若尚未突破0軸，仍不宜買進；<br>DIF 值若向下跌破 MACD 值及0 軸線，為<strong>賣出</strong>訊號，不過若尚未跌破0軸，仍不宜賣出</li><li><strong>交易訊號4:</strong> <br>当股价创新低，但MACD并没有相应创新低（牛市背离），视为<strong>利好</strong>（利多）讯息，股价跌势或将完结。<br>相反，若股价创新高，但MACD并没有相应创新高（熊市背离），视为<strong>利淡</strong>（利空）讯息。</li></ul><h2 id="交易信號2買入測試：棒形圖由負變正"><a href="#交易信號2買入測試：棒形圖由負變正" class="headerlink" title="交易信號2買入測試：棒形圖由負變正"></a>交易信號2買入測試：<strong>棒形圖由負變正</strong></h2><p>主要想知道黨macd的直方圖從負變正的時候是不是一個買入的信號，評判為正確的標準為股價在兩周内有上漲。</p><p>代碼如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git commit 19ae4aa7bd271b557c7f6e94bb3a9d6aa1c132ea</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strategy</span></span><br><span class="line"><span class="keyword">import</span> backtrader <span class="keyword">as</span> bt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Macd 策略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacdStrategy</span>(<span class="params">bt.Strategy</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#buy_prices = []</span></span><br><span class="line">    <span class="comment">#sell_prices = []</span></span><br><span class="line"></span><br><span class="line">    buy_date = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.macd = bt.indicators.MACDHisto(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.log(<span class="string">f&#x27;结束时资产：<span class="subst">&#123;self.broker.get_value():<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>):</span>  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.macd_buy_if_his_positive(self.macd.histo):</span><br><span class="line">            self.buy_with_all_cash()</span><br><span class="line">            self.buy_date = <span class="built_in">len</span>(self)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.sell_after_holding(self.buy_date,<span class="number">10</span>):</span><br><span class="line">           self.close_all(self.data) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># buy if macd his bigger than 0 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">macd_buy_if_his_positive</span>(<span class="params">self,his_line</span>):</span></span><br><span class="line">        <span class="keyword">if</span> his_line[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sell_after_holding</span>(<span class="params">self,buy_date,days=<span class="number">10</span></span>):</span></span><br><span class="line">        buy_price = <span class="literal">None</span></span><br><span class="line">        cur_date = <span class="built_in">len</span>(self)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> buy_date != <span class="literal">None</span>:</span><br><span class="line">            buy_price = self.data[buy_date - cur_date]</span><br><span class="line">        </span><br><span class="line">        cur_price = self.datas[<span class="number">0</span>].close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">## 兩周内盈利或者超過兩周都要賣出</span></span><br><span class="line">        <span class="keyword">if</span> (buy_price != <span class="literal">None</span>) <span class="keyword">and</span>( ( buy_price &lt; cur_price <span class="keyword">and</span> cur_date &lt;= buy_date + days) </span><br><span class="line">            <span class="keyword">or</span> (cur_date &gt; buy_date + days)) :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buy_with_all_cash</span>(<span class="params">self</span>):</span></span><br><span class="line">        size = <span class="built_in">int</span>((self.broker.get_cash() - <span class="number">10</span> )/(<span class="number">1.1</span> * self.data.close))</span><br><span class="line">        <span class="keyword">if</span> size &gt; <span class="number">0</span>:</span><br><span class="line">            self.buy(self.data,size)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_all</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.close(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify_order</span>(<span class="params">self,order</span>):</span></span><br><span class="line">        <span class="comment"># 如果order为submitted/accepted,返回空</span></span><br><span class="line">        <span class="keyword">if</span> order.status <span class="keyword">in</span> [order.Submitted, order.Accepted]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果order为buy/sell executed,报告价格结果</span></span><br><span class="line">        <span class="keyword">if</span> order.status <span class="keyword">in</span> [order.Completed]:</span><br><span class="line">            <span class="keyword">if</span> order.isbuy(): </span><br><span class="line">                self.log(<span class="string">f&#x27;买入: 基金:<span class="subst">&#123;order.data._name&#125;</span>&#x27;</span>\</span><br><span class="line">                    <span class="string">f&#x27; 价格:<span class="subst">&#123;order.executed.price:<span class="number">.2</span>f&#125;</span>,&#x27;</span>\</span><br><span class="line">                    <span class="string">f&#x27; 數目:<span class="subst">&#123;<span class="built_in">int</span>(order.executed.value/order.executed.price)&#125;</span>,&#x27;</span>\</span><br><span class="line">                    <span class="comment"># f&#x27; 手续费:&#123;order.executed.comm:.2f&#125;&#x27;\</span></span><br><span class="line">                    <span class="string">f&#x27; 日期:<span class="subst">&#123;order.data.datetime.date()&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.log(<span class="string">f&#x27;賣出: 基金:<span class="subst">&#123;order.data._name&#125;</span>&#x27;</span>\</span><br><span class="line">                    <span class="string">f&#x27; 价格:<span class="subst">&#123;order.executed.price:<span class="number">.2</span>f&#125;</span>,&#x27;</span>\</span><br><span class="line">                    <span class="string">f&#x27; 數目:<span class="subst">&#123;<span class="built_in">int</span>(order.executed.value/order.executed.price)&#125;</span>,&#x27;</span>\</span><br><span class="line">                    <span class="comment"># f&#x27; 手续费:&#123;order.executed.comm:.2f&#125;&#x27;\</span></span><br><span class="line">                    <span class="string">f&#x27; 日期:<span class="subst">&#123;order.data.datetime.date()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> order.status <span class="keyword">in</span> [order.Canceled, order.Margin, order.Rejected]:</span><br><span class="line">            self.log(<span class="string">&#x27;交易失败&#x27;</span>)</span><br><span class="line">            self.log(order.status == order.Margin)</span><br><span class="line">        self.order = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, txt, dt=<span class="literal">None</span>,doprint=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="comment">#if self.params.printlog or doprint:</span></span><br><span class="line">        dt = dt <span class="keyword">or</span> self.datas[<span class="number">0</span>].datetime.date(<span class="number">0</span>)</span><br><span class="line">        info = <span class="string">f&#x27;INFO: <span class="subst">&#123;dt.isoformat()&#125;</span>,<span class="subst">&#123;txt&#125;</span>&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(info) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strategy = MacdStrategy</span><br><span class="line">from_date=<span class="string">&#x27;2021-01-01&#x27;</span></span><br><span class="line">to_date=<span class="string">&#x27;2021-06-17&#x27;</span></span><br><span class="line">start_cash = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############### single run###################</span></span><br><span class="line"><span class="comment"># data_obj = hbRunner.get_data_obj_for_run_from_yahoo(&#x27;PTON&#x27;,from_date,to_date)</span></span><br><span class="line"><span class="comment"># r = hbRunner.hbrun(data_obj,strategy,start_cash,plot=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############### test all nasdaq stocks ###############</span></span><br><span class="line">nasdaq_ticker_list = hbDataLoader.get_component_list_df_by_index(<span class="string">&#x27;^NDX&#x27;</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">win_rate = <span class="number">0</span></span><br><span class="line">result_array = []</span><br><span class="line"><span class="keyword">for</span> ticker <span class="keyword">in</span> nasdaq_ticker_list.index:</span><br><span class="line">    <span class="built_in">print</span>(ticker)</span><br><span class="line">    counter+=<span class="number">1</span></span><br><span class="line">    data_obj = hbRunner.get_data_obj_for_run_from_yahoo(ticker,from_date,to_date)</span><br><span class="line">    r = hbRunner.hbrun(data_obj,strategy,start_cash,plot=<span class="literal">False</span>)</span><br><span class="line">    win_rate += r[<span class="string">&#x27;Win Rate&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;r[<span class="string">&#x27;Win Rate&#x27;</span>]*<span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line">    result_array.append(&#123;<span class="string">&#x27;ticker&#x27;</span>:ticker,<span class="string">&#x27;win_rate&#x27;</span>:r[<span class="string">&#x27;Win Rate&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;avg. win rate:<span class="subst">&#123;(win_rate*<span class="number">100</span>/counter):<span class="number">.2</span>f&#125;</span>%&#x27;</span>)</span><br><span class="line">pd.DataFrame(result_array).to_csv(<span class="string">&#x27;2021nasdaqWinRate.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>這個策略對納斯達克100的股票進行了測試，在等權重的基礎上，從2019到2021，其中每年的平均買入正確率都為72%</p><p>具體數據：</p><p><a href="https://docs.google.com/spreadsheets/d/1hWFfn15Xzu6Xzp2dtDMH8ZDNpQPBBpGFhNKHwhuzNic/edit#gid=0">https://docs.google.com/spreadsheets/d/1hWFfn15Xzu6Xzp2dtDMH8ZDNpQPBBpGFhNKHwhuzNic/edit#gid=0</a></p><h2 id="交易信號1買入測試：差离值由下而上穿过零轴"><a href="#交易信號1買入測試：差离值由下而上穿过零轴" class="headerlink" title="交易信號1買入測試：差离值由下而上穿过零轴"></a>交易信號1買入測試：差离值由下而上穿过零轴</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">macd_buy_if_his_positive</span>(<span class="params">self,his_line</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交易信號1: buy when macd turn from nagative to positive</span></span><br><span class="line">    <span class="keyword">if</span> his_line.macd[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.macd[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>這個策略對納斯達克100的股票進行了測試，在等權重的基礎上，從2019到2021，其中每年的平均買入正確率都為69.39%</p><h2 id="交易信號3買入測試：直方圖從負值變成正值并且MACD-快綫-也是正的"><a href="#交易信號3買入測試：直方圖從負值變成正值并且MACD-快綫-也是正的" class="headerlink" title="交易信號3買入測試：直方圖從負值變成正值并且MACD(快綫)也是正的"></a>交易信號3買入測試：直方圖從負值變成正值并且MACD(快綫)也是正的</h2><p> 買入策略的小更改，增加買在股價上升的 山腰上的概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buy if macd his bigger than 0 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">macd_buy_if_his_positive</span>(<span class="params">self,his_line</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># buy when histo turn from nagative to positive</span></span><br><span class="line">    <span class="comment">#if his_line.histo[0] &gt; 0 and his_line.histo[-1] &lt; 0:</span></span><br><span class="line">    <span class="comment">#    return True</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> his_line.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.histo[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        self.can_buy = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.can_buy <span class="keyword">and</span> his_line.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.macd[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            self.can_buy = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>這個策略也對納斯達克100的股票進行了測試，在等權重的基礎上，從2019到2021，其中每年的平均買入正確率也都為72%左右</p><h2 id="交易信號4買入測試：当股价创新低，但MACD并没有相应创新低"><a href="#交易信號4買入測試：当股价创新低，但MACD并没有相应创新低" class="headerlink" title="交易信號4買入測試：当股价创新低，但MACD并没有相应创新低"></a>交易信號4買入測試：当股价创新低，但MACD并没有相应创新低</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buy if macd his bigger than 0 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">macd_buy_if_his_positive</span>(<span class="params">self,his_line</span>):</span>  </span><br><span class="line">        <span class="comment"># 交易信號4</span></span><br><span class="line">        min_price_array = <span class="built_in">min</span>(self.data.close.get(size=<span class="number">26</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> min_price_array == self.data.close[<span class="number">0</span>]:</span><br><span class="line">            min_macd_array = <span class="built_in">min</span>(self.macd.macd.get(size=<span class="number">26</span>))</span><br><span class="line">            <span class="keyword">if</span> min_macd_array &lt; self.macd.macd[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>這個策略也對納斯達克100的股票進行了測試，在等權重的基礎上，從2019到2021，其中每年的平均買入正確率也都為68%左右.</p><h2 id="交易信號2買入賣出測試"><a href="#交易信號2買入賣出測試" class="headerlink" title="交易信號2買入賣出測試"></a>交易信號2買入賣出測試</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sell_sig</span>(<span class="params">self</span>):</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment"># 交易信號2: buy when histo turn from nagative to positive</span></span><br><span class="line">     <span class="keyword">if</span> self.macd.histo[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">and</span> self.macd.histo[-<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_buy_sig</span>(<span class="params">self,his_line</span>):</span></span><br><span class="line">      <span class="comment"># 交易信號2: buy when histo turn from nagative to positive</span></span><br><span class="line">      <span class="keyword">if</span> his_line.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.histo[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>對納斯達克100的股票進行了測試，從2019到2021，平均回報率為34%</p><h2 id="交易信號3買入賣出測試"><a href="#交易信號3買入賣出測試" class="headerlink" title="交易信號3買入賣出測試"></a>交易信號3買入賣出測試</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sell_sig</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 兩周内盈利或者超過兩周都要賣出</span></span><br><span class="line">        <span class="comment"># buy_price = None</span></span><br><span class="line">        <span class="comment"># cur_date = len(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if buy_date != None:</span></span><br><span class="line">        <span class="comment">#     buy_price = self.data[buy_date - cur_date]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># cur_price = self.datas[0].close</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment"># if (buy_price != None) and( ( buy_price &lt; cur_price and cur_date &lt;= buy_date + days) </span></span><br><span class="line">        <span class="comment">#     or (cur_date &gt; buy_date + days)) :</span></span><br><span class="line">        <span class="comment">#     return True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 交易信號2: buy when histo turn from nagative to positive</span></span><br><span class="line">        <span class="comment"># if self.macd.histo[0] &lt; 0 and self.macd.histo[-1] &gt; 0:</span></span><br><span class="line">        <span class="comment">#    return True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 交易信號3</span></span><br><span class="line">        <span class="keyword">if</span> self.macd.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> self.macd.histo[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">            self.can_sell = <span class="literal">True</span></span><br><span class="line">            self.can_buy = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.can_sell <span class="keyword">and</span> self.macd.histo[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">and</span> self.macd[<span class="number">0</span>] &lt; <span class="number">0</span>:</span><br><span class="line">                self.can_sell = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buy_sig</span>(<span class="params">self,his_line</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 交易信號1: buy when macd turn from nagative to positive</span></span><br><span class="line">        <span class="comment"># if his_line.macd[0] &gt; 0 and his_line.macd[-1] &lt; 0:</span></span><br><span class="line">        <span class="comment">#     return True</span></span><br><span class="line">                   </span><br><span class="line">        <span class="comment"># 交易信號2: buy when histo turn from nagative to positive</span></span><br><span class="line">        <span class="comment"># if his_line.histo[0] &gt; 0 and his_line.histo[-1] &lt; 0:</span></span><br><span class="line">        <span class="comment">#    return True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 交易信號3</span></span><br><span class="line">        <span class="keyword">if</span> his_line.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.histo[-<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">            self.can_buy = <span class="literal">True</span></span><br><span class="line">            self.can_sell = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.can_buy <span class="keyword">and</span> his_line.histo[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> his_line.macd[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                self.can_buy = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 交易信號4</span></span><br><span class="line">        <span class="comment"># min_price_array = min(self.data.close.get(size=26))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># if min_price_array == self.data.close[0]:</span></span><br><span class="line">        <span class="comment">#     min_macd_array = min(self.macd.macd.get(size=26))</span></span><br><span class="line">        <span class="comment">#     if min_macd_array &lt; self.macd.macd[0]:</span></span><br><span class="line">        <span class="comment">#         return True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>對納斯達克100的股票進行了測試，從2019到2021，平均回報率為54%</p><h2 id="交易信號1買入賣出測試"><a href="#交易信號1買入賣出測試" class="headerlink" title="交易信號1買入賣出測試"></a>交易信號1買入賣出測試</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> def get_sell_sig(self):</span><br><span class="line"></span><br><span class="line">     # 交易信號1: </span><br><span class="line">     if self.macd.macd[0] &lt; 0 and self.macd.macd[-1] &gt; 0:</span><br><span class="line">         return True</span><br><span class="line">         </span><br><span class="line">def get_buy_sig(self):</span><br><span class="line"></span><br><span class="line">     # 交易信號1: buy when macd turn from nagative to positive</span><br><span class="line">     if self.macd.macd[0] &gt; 0 and self.macd.macd[-1] &lt; 0:</span><br><span class="line">         return True</span><br></pre></td></tr></table></figure><p>對納斯達克100的股票進行了測試，從2019到2021，平均回報率為43%</p>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python how to import my module from folder</title>
      <link href="2021/06/17/python-how-to-import-my-module-from-folder/"/>
      <url>2021/06/17/python-how-to-import-my-module-from-folder/</url>
      
        <content type="html"><![CDATA[<h1 id="python-module-include-path"><a href="#python-module-include-path" class="headerlink" title="python_module_include_path"></a>python_module_include_path</h1><p>Show how to add module to python module search path</p><p>Code could be found at here(<a href="https://github.com/wuhaibo/python_module_include_path">https://github.com/wuhaibo/python_module_include_path</a>)</p><h2 id="Where-does-python-search-modules"><a href="#Where-does-python-search-modules" class="headerlink" title="Where does python search modules?"></a>Where does python search modules?</h2><p>Run the following cmd </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python_module_include_path\myMod&gt;python showSysPath.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> myMod is <span class="keyword">in</span> searching path</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">python_module_include_path&gt;</span><span class="bash">python myMod/showSysPath.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> myMode is <span class="keyword">in</span> searching path</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The folder containing showSysPath.py would be added into the python module searching path.</p><h2 id="How-to-import-module-from-folder"><a href="#How-to-import-module-from-folder" class="headerlink" title="How to import module from folder?"></a>How to import module from folder?</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">+-- test.py</span><br><span class="line">+-- myMod</span><br><span class="line">|   +-- __init__.py</span><br><span class="line">|   +-- greeting.py</span><br><span class="line">+-- test</span><br><span class="line">|   +-- __init__.py</span><br><span class="line">|   +-- test.py</span><br></pre></td></tr></table></figure><p>say we want to import myMod/greeting in test/test.py<br>in test.py we add following code </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## setup path</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">basePath = os.path.dirname(os.path.abspath(__file__)) + <span class="string">&quot;\..&quot;</span></span><br><span class="line">sys.path.append(basePath)</span><br><span class="line"><span class="comment">## end setup path</span></span><br></pre></td></tr></table></figure><h2 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h2><p>the method import using relative path like ‘from ..myMode import greeting’ is not good, cause it lacks of the ability to handle namespace pullution. </p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>學習mit mba金融學筆記</title>
      <link href="2021/06/15/%E5%AD%B8%E7%BF%92mit-mba%E9%87%91%E8%9E%8D%E5%AD%B8%E7%AD%86%E8%A8%98/"/>
      <url>2021/06/15/%E5%AD%B8%E7%BF%92mit-mba%E9%87%91%E8%9E%8D%E5%AD%B8%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<h2 id="第一課-簡介"><a href="#第一課-簡介" class="headerlink" title="第一課 簡介"></a>第一課 <a href="https://ocw.mit.edu/courses/sloan-school-of-management/15-401-finance-theory-i-fall-2008/video-lectures-and-slides/MIT15_401F08_lec01.pdf">簡介</a></h2><p>金融就兩件事情，資產定價和資產管理。</p><p>財務兩件事，資產和現金流（資產負債表和損益表）</p><p>金融的挑戰：時間和風險</p>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融 </tag>
            
            <tag> mit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 常用命令</title>
      <link href="2021/06/12/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/06/12/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Image相關"><a href="#Image相關" class="headerlink" title="Image相關"></a>Image相關</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 編譯image</span></span><br><span class="line">sudo docker build -t $imagename$ $Path_to_Dockerfile$</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出本机的所有 image 文件。</span></span><br><span class="line">sudo docker image ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 image 文件</span></span><br><span class="line">sudo docker image rm $imageName$</span><br></pre></td></tr></table></figure><h3 id="Container相關"><a href="#Container相關" class="headerlink" title="Container相關"></a>Container相關</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run container</span></span><br><span class="line">sudo docker run -d --name $containerName$ $ImageName$</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 得到正在運行的container</span></span><br><span class="line">sudo docker container ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">sudo docker container ls --all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start container</span></span><br><span class="line">sudo docker container start $containerID$</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> remove container</span></span><br><span class="line">sudo docker container -rm $containerName$</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止container</span></span><br><span class="line">sudo docker container stop $containerId$</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 得到運行中container的shell</span></span><br><span class="line">sudo docker exec -it $containerName or containerId$ /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker container logs</span></span><br><span class="line">sudo docker container logs [containerID]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker container cp data from container to host</span></span><br><span class="line">sudo docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target</span><br></pre></td></tr></table></figure><h3 id="Dockerfile-相關"><a href="#Dockerfile-相關" class="headerlink" title="Dockerfile 相關"></a>Dockerfile 相關</h3><p>一個例子：<a href="https://github.com/wuhaibo/python_cron_job_in_docker">https://github.com/wuhaibo/python_cron_job_in_docker</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get -y install cron vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup cron job</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> crontab /etc/cron.d/crontab</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 0644 /etc/cron.d/crontab</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> /usr/bin/crontab /etc/cron.d/crontab</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup for python app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r /app/src/requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;cron&quot;</span>, <span class="string">&quot;-f&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li><p>FROM python:3.7 以python image為基礎製作image</p></li><li><p>RUN apt-get update &amp;&amp; apt-get -y install cron vim。 RUN 可以表示在image中用來執行shell命令</p></li><li><p>WORKDIR /app 指明並創建工作文件夾是/app</p></li><li><p>COPY crontab /etc/cron.d/crontab 把本機（host）的文件（./crontab）copy到image的/etc/cron.d/crontab</p></li><li><p>CMD [“cron”, “-f”] docker文件中必須有至少CMD 或者ENTRYPOINT命令。 </p><ul><li>exec 模式和 shell 模式:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] // 这是 <span class="built_in">exec</span> 模式的写法，注意需要使用双引号。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 // 这是 shell 模式的写法。</span></span><br></pre></td></tr></table></figure><p>exec 模式是建议的使用模式, exec 模式的特点是不会通过 shell 执行相关的命令, 不過可以這樣寫<br><code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code>。使用 shell 模式时，docker 会以 /bin/sh -c “task command” 的方式执行任务命令。也就是说容器中的 1 号进程不是任务进程而是 bash 进程</p></li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>在DockerFile中写入的CMD后面的命令不执行主要是因为启动的时候指定了shell</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu cron job</title>
      <link href="2021/06/12/ubuntu%20cron%20job/"/>
      <url>2021/06/12/ubuntu%20cron%20job/</url>
      
        <content type="html"><![CDATA[<h2 id="Installing-Cron"><a href="#Installing-Cron" class="headerlink" title="Installing Cron"></a>Installing Cron</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install cron</span><br><span class="line">sudo systemctl enable cron</span><br><span class="line"><span class="meta">#</span><span class="bash"> validate cron service is running</span></span><br><span class="line">sudo services --status-all </span><br></pre></td></tr></table></figure><h2 id="Add-Cron-Job"><a href="#Add-Cron-Job" class="headerlink" title="Add Cron Job"></a>Add Cron Job</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. add/edit cron <span class="built_in">jobs</span> using interactive manner, edit or add cron job according to following format</span></span><br><span class="line">crontab -e </span><br><span class="line"><span class="meta">#</span><span class="bash"> minute hour day_of_month month day_of_week command_to_run</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. add cron <span class="built_in">jobs</span> using pure cmd,</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.1 prepare crontab file like above format <span class="keyword">for</span> cronjob, say the file name is crontab</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.2 cp crontab /etc/cron.d/crontab</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.3 chmod 0644 /etc/cron.d/crontab</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.4 /usr/bin/crontab /etc/cron.d/crontab</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> note an example <span class="keyword">for</span> docker could be used as refference</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/wuhaibo/python_cron_job_in_docker/blob/main/Dockerfile</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> list cron <span class="built_in">jobs</span></span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> delete cron <span class="built_in">jobs</span></span></span><br><span class="line">crontab -r</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>filed</th><th>allowed values</th></tr></thead><tbody><tr><td>minute</td><td>0-59</td></tr><tr><td>hour</td><td>0-23</td></tr><tr><td>Day of the month</td><td>1-31</td></tr><tr><td>month</td><td>1-12 or JAN-DEC</td></tr><tr><td>Day of the week</td><td>0-6 or SUN-SAT</td></tr></tbody></table><p>example:</p><ul><li><code>* * * * *</code> - Run the command every minute.</li><li><code>12 * * * *</code> - Run the command 12 minutes after every hour.</li><li><code>*/15 * * * *</code> - Run the command every 15 minutes.</li><li><code>0 4 * * 1-5</code> - Run the command every Tuesday, Wednesday, and Thursday at 4:00 AM.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python cron job in docker</title>
      <link href="2021/06/12/python-cron-job-in-docker/"/>
      <url>2021/06/12/python-cron-job-in-docker/</url>
      
        <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>This is a template for python cron job in docker.<br>The cron job is very simple. It writes string to /app/result.txt every min.</p><h3 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t cron_python</span><br></pre></td></tr></table></figure><h3 id="Run-Container"><a href="#Run-Container" class="headerlink" title="Run Container"></a>Run Container</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name python_cron_container cron_python</span><br></pre></td></tr></table></figure><h3 id="Check-Result"><a href="#Check-Result" class="headerlink" title="Check Result"></a>Check Result</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it python_cron_container /bin/bash</span><br><span class="line"></span><br><span class="line"># in container bash</span><br><span class="line">cat /app/result.txt</span><br></pre></td></tr></table></figure><h3 id="Stop-Container"><a href="#Stop-Container" class="headerlink" title="Stop Container"></a>Stop Container</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker container stop python_cron_container</span><br><span class="line">sudo docker container rm python_cron_container</span><br></pre></td></tr></table></figure><p>code could be found <a href="https://github.com/wuhaibo/python_cron_job_in_docker.git">https://github.com/wuhaibo/python_cron_job_in_docker.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 常用命令</title>
      <link href="2021/06/02/windows-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/06/02/windows-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="get-wifi-password"><a href="#get-wifi-password" class="headerlink" title="get wifi password"></a>get wifi password</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show profile name=<span class="variable">$wlanName</span><span class="variable">$</span> key=<span class="built_in">clear</span></span><br></pre></td></tr></table></figure><h3 id="Get-windows-Service-with-execute-path"><a href="#Get-windows-Service-with-execute-path" class="headerlink" title="Get windows Service with execute path"></a>Get windows Service with execute path</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-WmiObject</span> win32_service  | <span class="built_in">select</span> Name, state, PathName | <span class="built_in">Sort-Object</span> state | <span class="built_in">Export-Csv</span> <span class="string">&quot;service.csv&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ftp-cmd"><a href="#ftp-cmd" class="headerlink" title="ftp cmd"></a>ftp cmd</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ftp <span class="variable">$destination</span><span class="variable">$</span> </span><br><span class="line"><span class="comment">## give user name and password</span></span><br><span class="line"><span class="comment">## ? for help</span></span><br><span class="line"><span class="comment">## ! escape the cmd to shell</span></span><br><span class="line"><span class="comment">## send file use put</span></span><br></pre></td></tr></table></figure><h3 id="Get-scheduled-job-tasks"><a href="#Get-scheduled-job-tasks" class="headerlink" title="Get scheduled job/tasks"></a>Get scheduled job/tasks</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">schtasks /query /v /fo LIST</span><br><span class="line"></span><br><span class="line"><span class="comment">## powershell, this is not working for windows before windows 2012</span></span><br><span class="line"><span class="built_in">get-scheduledtask</span> | <span class="built_in">get-scheduledtaskinfo</span> | <span class="built_in">select</span> TaskName, TaskPath</span><br></pre></td></tr></table></figure><h3 id="find-file"><a href="#find-file" class="headerlink" title="find file"></a>find file</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /s *foo*.txt</span><br></pre></td></tr></table></figure><h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><h3 id="Tool-to-View-the-IIS-Log-Logparser"><a href="#Tool-to-View-the-IIS-Log-Logparser" class="headerlink" title="Tool to View the IIS Log : Logparser"></a>Tool to View the IIS Log : Logparser</h3><p><a href="https://blogs.msdn.microsoft.com/friis/2014/02/06/how-to-analyse-iis-logs-using-logparser-logparser-studio/">https://blogs.msdn.microsoft.com/friis/2014/02/06/how-to-analyse-iis-logs-using-logparser-logparser-studio/</a></p><h3 id="Use-Cmd-to-Export-Import-IIS-Websites"><a href="#Use-Cmd-to-Export-Import-IIS-Websites" class="headerlink" title="Use Cmd to Export/Import IIS Websites"></a>Use Cmd to Export/Import IIS Websites</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To Export the Application Pools</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd list apppool /config /xml &gt; c:\apppools.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># To import  the Application Pools</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd add apppool /<span class="keyword">in</span> &lt; c:\apppools.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># To Export all your website:</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd list site /config /xml &gt; c:\sites.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># To Import all your website:</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd add site /<span class="keyword">in</span> &lt; c:\sites.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># To export/import a single application pool:</span></span><br><span class="line"><span class="comment">##export</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd list apppool “MyAppPool” /config /xml &gt; c:\myapppool.xml</span><br><span class="line"><span class="comment">##import</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd add apppool /<span class="keyword">in</span> &lt; c:\myapppool.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># To export/import a single website:</span></span><br><span class="line"><span class="comment">##export</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd list site “MyWebsite” /config /xml &gt; c:\mywebsite.xml</span><br><span class="line"><span class="comment">##import</span></span><br><span class="line">%windir%\system32\inetsrv\appcmd add site /<span class="keyword">in</span> &lt; c:\mywebsite.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows，cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seafile 搭建私有云之二：ngnix ssl 反向代理</title>
      <link href="2021/06/01/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91%E4%B9%8B%E4%BA%8C%EF%BC%9Angnix-ssl-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>2021/06/01/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91%E4%B9%8B%E4%BA%8C%EF%BC%9Angnix-ssl-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>記錄一下自己搭建私有云的過程。这里主要介绍seafile的部分。</p><p>过程分两个博文</p><p><a href="https://friendly-mcnulty-50c07e.netlify.app/2021/05/27/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/">Seafile 搭建私有云一：搭建Seafile</a></p><p><a href="https://friendly-mcnulty-50c07e.netlify.app/2021/06/01/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91%E4%B9%8B%E4%BA%8C%EF%BC%9Angnix-ssl-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/">Seafile 搭建私有云之二：ngnix ssl 反向代理</a></p></blockquote><h2 id="准备docker-compose-yml"><a href="#准备docker-compose-yml" class="headerlink" title="准备docker-compose.yml"></a>准备docker-compose.yml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nginx: </span><br><span class="line">    image: nginx:latest</span><br><span class="line">    container_name: production_nginx</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line">      - ./certificate.pem:/etc/ssl/live/certificate.pem</span><br><span class="line">      - ./private_key.key:/etc/ssl/live/private_key.key</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443</span><br><span class="line">    networks:</span><br><span class="line">        - seafile-net</span><br><span class="line">    external_links:</span><br><span class="line">        - seafile</span><br><span class="line">  </span><br><span class="line">networks:</span><br><span class="line">  seafile-net:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><h2 id="准备ssl-certificates"><a href="#准备ssl-certificates" class="headerlink" title="准备ssl certificates"></a>准备ssl certificates</h2><p>依照如上位置存放ssl certificates 和private key</p><h2 id="准备ngnix-config"><a href="#准备ngnix-config" class="headerlink" title="准备ngnix config"></a>准备ngnix config</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  error_log /etc/nginx/error_log.log warn;</span><br><span class="line">  client_max_body_size 20m;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line"></span><br><span class="line">server_name  host.com; # process the request with host as host.com</span><br><span class="line">listen       80;</span><br><span class="line">listen       443 ssl;</span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/ssl/live/lb-home/fullchain.pem; # ssl certificate</span><br><span class="line">    ssl_certificate_key /etc/ssl/live/lb-home/privkey.pem; # private key</span><br><span class="line"></span><br><span class="line">location / &#123; </span><br><span class="line">    # common ngnix reverse proxy options</span><br><span class="line">proxy_http_version  1.1;</span><br><span class="line">proxy_cache_bypass  $http_upgrade;</span><br><span class="line"></span><br><span class="line">proxy_set_header Upgrade           $http_upgrade;</span><br><span class="line">proxy_set_header Connection        &quot;upgrade&quot;;</span><br><span class="line">proxy_set_header Host              $host;</span><br><span class="line">proxy_set_header X-Real-IP         $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">proxy_set_header X-Forwarded-Host  $host;</span><br><span class="line">proxy_set_header X-Forwarded-Port  $server_port;</span><br><span class="line"># end common ngnix reverse proxy options</span><br><span class="line"></span><br><span class="line">proxy_pass http://localhost:80;  # forword request to http://localhost:80;</span><br><span class="line">index index.html; # index is index.html</span><br><span class="line">    if ($scheme = http) &#123;</span><br><span class="line">        return 301 https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备ngnix config 文件，并存入相应位置。</p><p>ngnix config 参考 <a href="https://linuxize.com/post/nginx-reverse-proxy/">https://linuxize.com/post/nginx-reverse-proxy/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngnix，反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>資產配置</title>
      <link href="2021/05/27/%E8%B3%87%E7%94%A2%E9%85%8D%E7%BD%AE/"/>
      <url>2021/05/27/%E8%B3%87%E7%94%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>投資第一步，資產配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 投資 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 資產配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql datadump without password</title>
      <link href="2021/05/27/mysql-docker-datadump-without-password/"/>
      <url>2021/05/27/mysql-docker-datadump-without-password/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多時候需要執行mysql脚本，在執行脚本的時候需要指定用戶名密碼，把密碼放在脚本裏不太安全，本文介紹一種方法，把密碼放在配置文件中，脚本執行的時候會自動從配置文件中讀取密碼。</p></blockquote><ul><li>第一步創建 <code>~/.my.cnf</code>文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqldump]</span><br><span class="line">user = mysqluser</span><br><span class="line">password = secret</span><br></pre></td></tr></table></figure><ul><li>第二步修改權限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.my.cnf</span><br></pre></td></tr></table></figure><ul><li>測試</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump  -uroot  --opt $dbname$  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Setup</title>
      <link href="2021/05/27/hexo-setup/"/>
      <url>2021/05/27/hexo-setup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a brief introduction on how to use hexo to setup a blog system hosting on github.<br>Hexo is a static blog system. We could use it to translate markdown files to html files which could be used in our static blog website.<br>To save the hosting cost, we are goting to deploy the html files to github. In this way, we will have a free blog system. :)<br>To achieve our goal we need to </p><ul><li>create a github page hosting repo</li><li>setup hexo locally to generate our ‘html’ blogs and deploy the html to github repo from &gt; last step</li><li>use hexo-admin to edit markdown file locally (optional)</li></ul></blockquote><h2 id="Create-Github-Page-Hosting-Repo"><a href="#Create-Github-Page-Hosting-Repo" class="headerlink" title="Create Github Page Hosting Repo"></a>Create Github Page Hosting Repo</h2><h2 id="Setup-Hexo-locally"><a href="#Setup-Hexo-locally" class="headerlink" title="Setup Hexo locally"></a>Setup Hexo locally</h2><h2 id="Add-Hexo-admin-Support"><a href="#Add-Hexo-admin-Support" class="headerlink" title="Add Hexo-admin Support"></a>Add Hexo-admin Support</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> github page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Markdown</title>
      <link href="2021/05/27/hexo-markdown/"/>
      <url>2021/05/27/hexo-markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><p>這篇文章主要介紹markdown的基本語法。 包括文章頭格式, 斜體, 粗體和删除线, 超链接, 圖片, 引用, 无序列表, 有序列表, 表格, 代码块, checkbox等等。</p></blockquote><h2 id="文章頭格式"><a href="#文章頭格式" class="headerlink" title="文章頭格式"></a>文章頭格式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo Markdown</span><br><span class="line">date: 2016-01-15 20:19:32</span><br><span class="line">tags: [Markdown,LaTex,教程]</span><br><span class="line">categories: 学习</span><br><span class="line"><span class="section">toc: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="斜體-粗體和删除线"><a href="#斜體-粗體和删除线" class="headerlink" title="斜體,粗體和删除线"></a>斜體,粗體和删除线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜體*</span> <span class="strong">**粗體**</span> ~~刪除的文字~~</span><br></pre></td></tr></table></figure><p><em>斜體</em> ,<br><strong>粗體</strong> ,<br><del>刪除的文字</del></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址 &quot;链接标题&quot;</span>)</span><br><span class="line">e.g.: [<span class="string">my blog</span>](<span class="link">http://wuhaibo.github.io</span>)</span><br></pre></td></tr></table></figure><p>比如: <a href="http://wuhaibo.github.io/">my blog</a></p><h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8b25saW5lfGVufDB8fDB8fA%3D%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8b25saW5lfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60" width="50%"><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用 &gt; 表示文字引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 野火烧不尽,春风吹又生</span><br></pre></td></tr></table></figure><blockquote><p>野火烧不尽,春风吹又生</p></blockquote><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> 无序列表项 一</span><br><span class="line"><span class="bullet">-</span> 子无序列表 一</span><br><span class="line"><span class="bullet">-</span> 子无序列表 二</span><br><span class="line"><span class="bullet">*</span> 子无序列表 三</span><br><span class="line"><span class="bullet">+</span> 无序列表项 二</span><br><span class="line"><span class="bullet">+</span> 无序列表项 三</span><br></pre></td></tr></table></figure><ul><li>无序列表项 一<pre><code>    - 子无序列表 一    - 子无序列表 二        * 子无序列表 三</code></pre></li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表项 一</span><br><span class="line"><span class="bullet">1.</span> 子有序列表项 一</span><br><span class="line"><span class="bullet">2.</span> 子有序列表项 二</span><br><span class="line"><span class="bullet">2.</span> 有序列表项 二</span><br><span class="line"><span class="bullet">3.</span> 有序列表项 三</span><br></pre></td></tr></table></figure><ol><li><p>有序列表项 一</p><ol><li>子有序列表项 一</li><li>子有序列表项 二</li></ol></li><li><p>有序列表项 二</p></li><li><p>有序列表项 三</p></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>绘制表格格式如下,| 控制分列,- 控制分行,: 控制对齐方式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Item     | Value     | Qty   |</span><br><span class="line">| :------- | --------: | :---: |</span><br><span class="line">| Computer | 1600 USD  | 5     |</span><br><span class="line">| Phone    | 12 USD    | 12    |</span><br><span class="line">| Pipe     | 1 USD     | 234   |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Item</th><th>Value</th><th>Qty</th></tr></thead><tbody><tr><td>Computer</td><td>1600 USD</td><td>5</td></tr><tr><td>Phone</td><td>12 USD</td><td>12</td></tr><tr><td>Pipe</td><td>1 USD</td><td>234</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用 <span class="code">``` some codes ```</span>表示的代码块（左侧无空格）</span><br></pre></td></tr></table></figure><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure><ul><li>Write the press release</li><li>Update the website</li><li>Contact the media</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 常用命令</title>
      <link href="2021/05/27/Ubuntu-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/05/27/Ubuntu-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 常用命令</p>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seafile 搭建私有云一：搭建Seafile</title>
      <link href="2021/05/27/Seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/"/>
      <url>2021/05/27/Seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>記錄一下自己搭建私有云的過程。这里主要介绍seafile的部分。</p><p>过程分两个博文</p><p><a href="https://friendly-mcnulty-50c07e.netlify.app/2021/05/27/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/">Seafile 搭建私有云一：搭建Seafile</a></p><p><a href="https://friendly-mcnulty-50c07e.netlify.app/2021/06/01/seafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91%E4%B9%8B%E4%BA%8C%EF%BC%9Angnix-ssl-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/">Seafile 搭建私有云之二：ngnix ssl 反向代理</a></p></blockquote><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>本文假設要把seafile用以docker的形式安裝在ubuntu 18上.<br>然後使用ngnix作爲反向代理實現https。 </p><h2 id="安裝Seafile"><a href="#安裝Seafile" class="headerlink" title="安裝Seafile"></a>安裝Seafile</h2><h3 id="安裝docker-compose"><a href="#安裝docker-compose" class="headerlink" title="安裝docker-compose"></a>安裝docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-compose -y</span><br></pre></td></tr></table></figure><h3 id="準備docker-compose-yml文件"><a href="#準備docker-compose-yml文件" class="headerlink" title="準備docker-compose.yml文件"></a>準備docker-compose.yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:10.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=</span>  <span class="comment"># Requested, set the root&#x27;s password of MySQL service.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_LOG_CONSOLE=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/seafile-mysql/db:/var/lib/mysql</span>  <span class="comment"># Requested, specifies the path to MySQL data persistent store.</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">memcached:1.5.6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile-memcached</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">memcached</span> <span class="string">-m</span> <span class="number">256</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line">          </span><br><span class="line">  <span class="attr">seafile:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seafileltd/seafile-mc:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seafile</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;443:443&quot;  # If https is enabled, cancel the comment.</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/seafile-data:/shared</span>   <span class="comment"># Requested, specifies the path to Seafile data persistent store.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_ROOT_PASSWD=</span>  <span class="comment"># Requested, the value shuold be root&#x27;s password of MySQL service.</span></span><br><span class="line"><span class="comment">#      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_EMAIL=</span> <span class="comment"># Specifies Seafile admin user, default is &#x27;me@example.com&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_ADMIN_PASSWORD=</span> <span class="comment"># Specifies Seafile admin password, default is &#x27;asecret&#x27;.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_LETSENCRYPT=false</span>   <span class="comment"># Whether use letsencrypt to generate cert.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEAFILE_SERVER_HOSTNAME=</span> <span class="comment"># Specifies your host name.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seafile-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">seafile-net:</span></span><br></pre></td></tr></table></figure><p>這裏要把<br><code>MYSQL_ROOT_PASSWORD</code>， <code>DB_ROOT_PASSWD</code>，<code>SEAFILE_ADMIN_EMAIL</code>，<code>SEAFILE_ADMIN_PASSWORD</code>，<code>SEAFILE_SERVER_HOSTNAME</code><br>設定為自己需要的值。</p><p>另外</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">seafile-net:</span></span><br></pre></td></tr></table></figure><p>這裏表明這個文件的services共用一個叫 <code>seafile-net</code>的網絡。</p><p>docker Seafile service 于主機共享了  <code>/opt/seafile-data（host）:/shared（container）</code></p><h3 id="啓動Seafile-server"><a href="#啓動Seafile-server" class="headerlink" title="啓動Seafile server"></a>啓動Seafile server</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">seafile-net:</span></span><br></pre></td></tr></table></figure><h3 id="Log-Path"><a href="#Log-Path" class="headerlink" title="Log Path"></a>Log Path</h3><ul><li><code>/opt/seafile-data/logs/seafile</code> 是seafile的日志</li><li><code>/opt/seafile-data/logs/seafile</code> 是container的日志</li></ul><h3 id="備份和恢復"><a href="#備份和恢復" class="headerlink" title="備份和恢復"></a>備份和恢復</h3><p>目標：建立一個ubuntu cron job 來定時備份</p><h4 id="建立備份脚本"><a href="#建立備份脚本" class="headerlink" title="建立備份脚本"></a>建立備份脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cronjob_name=<span class="string">&quot;backupSeafile&quot;</span></span><br><span class="line">today=$(date +%Y%m%d_%I%M%S)</span><br><span class="line">log_file=<span class="string">&quot;/home/williamwood/cronjob/cronjob.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\n\n*******************run <span class="variable">$cronjob_name</span> at <span class="variable">$today</span>******************&quot;</span> &gt;&gt; <span class="variable">$log_file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate backup data locally</span></span><br><span class="line">data_folder=/opt/seafile-backup/data</span><br><span class="line"></span><br><span class="line"><span class="comment">## 增量備份</span></span><br><span class="line">rsync -az /opt/seafile-data/seafile /opt/seafile-backup/data/</span><br><span class="line"><span class="built_in">cd</span> /opt/seafile-backup/data &amp;&amp; rm -rf ccnet</span><br><span class="line"></span><br><span class="line"><span class="comment">## 簡單copy 備份</span></span><br><span class="line"><span class="comment"># cp -R /opt/seafile-data/seafile /opt/seafile-backup/data/</span></span><br><span class="line"><span class="comment"># cd /opt/seafile-backup/data &amp;&amp; rm -rf ccnet</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;seafile data backup done&quot;</span> &gt;&gt; <span class="variable">$log_file</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql mysqldump  -uroot -p$password$ --opt ccnet_db &gt; /opt/seafile-backup/databases/ccnet_db.sql</span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql mysqldump  -uroot -p$password$ --opt seafile_db &gt; /opt/seafile-backup/databases/seafile_db.sql</span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql mysqldump  -uroot -p$password$ --opt seahub_db &gt; /opt/seafile-backup/databases/seahub_db.sql</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;seafile database backup done&quot;</span> &gt;&gt; <span class="variable">$log_file</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;**********************************end***********************************&quot;</span> &gt;&gt; <span class="variable">$log_file</span></span><br></pre></td></tr></table></figure><h4 id="創建cronjob"><a href="#創建cronjob" class="headerlink" title="創建cronjob"></a>創建cronjob</h4><ul><li>以root賬戶執行cronjob脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cronjob -e</span><br></pre></td></tr></table></figure><ul><li>脚本執行后寫入任務執行時間和執行脚本</li></ul><img src="https://res.cloudinary.com/dr8wkuoot/image/upload/v1621939199/blog/cronjob_fvbqfw.jpg"><h3 id="恢復"><a href="#恢復" class="headerlink" title="恢復"></a>恢復</h3><h4 id="恢復database"><a href="#恢復database" class="headerlink" title="恢復database"></a>恢復database</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker cp /opt/seafile-backup/databases/ccnet_db.sql seafile-mysql:/tmp/ccnet_db.sql</span><br><span class="line">docker cp /opt/seafile-backup/databases/seafile_db.sql seafile-mysql:/tmp/seafile_db.sql</span><br><span class="line">docker cp /opt/seafile-backup/databases/seahub_db.sql seafile-mysql:/tmp/seahub_db.sql</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql /bin/sh -c <span class="string">&quot;mysql -uroot -p$psd$ ccnet_db &lt; /tmp/ccnet_db.sql&quot;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql /bin/sh -c <span class="string">&quot;mysql -uroot -p$psd$ seafile_db &lt; /tmp/seafile_db.sql&quot;</span></span><br><span class="line">docker <span class="built_in">exec</span> -it seafile-mysql /bin/sh -c <span class="string">&quot;mysql -uroot -p$psd$ seahub_db &lt; /tmp/seahub_db.sql&quot;</span></span><br></pre></td></tr></table></figure><h4 id="恢復Seafile-data"><a href="#恢復Seafile-data" class="headerlink" title="恢復Seafile data"></a>恢復Seafile data</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -R /opt/seafile-backup/data/* /opt/seafile-data/seafile/</span><br></pre></td></tr></table></figure><h2 id="碰到的問題"><a href="#碰到的問題" class="headerlink" title="碰到的問題"></a>碰到的問題</h2><ul><li>問題：修改網站地址后（比如測試時用了ip作爲網址，後來改為域名），資源網址沒改，導致錯誤avatars圖片錯誤。</li><li>解決辦法，重啓memcached </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart seafile-memcached</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Seafile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas Cheat Sheet</title>
      <link href="2021/05/27/Pandas-Cheat-Sheet/"/>
      <url>2021/05/27/Pandas-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Pandas Cheat Sheet</p></blockquote><h2 id="创建dataframe"><a href="#创建dataframe" class="headerlink" title="创建dataframe"></a>创建dataframe</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列创建</span></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">    &#123;<span class="string">&quot;a&quot;</span> : [<span class="number">4</span> ,<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    <span class="string">&quot;b&quot;</span> : [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="string">&quot;c&quot;</span> : [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]&#125;,</span><br><span class="line">    index = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行创建</span></span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">  [[<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>]],</span><br><span class="line">  index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># create from list of dict</span></span><br><span class="line"></span><br><span class="line">dict_list = [</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;testname1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;testname2&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">df2 = pd.DataFrame(dict_list)</span><br></pre></td></tr></table></figure><h2 id="改变dataframe"><a href="#改变dataframe" class="headerlink" title="改变dataframe"></a>改变dataframe</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照某列的值进行行排序</span></span><br><span class="line">df.sort_values(<span class="string">&#x27;mpg&#x27;</span>)</span><br><span class="line">df.sort_values(<span class="string">&#x27;mpg&#x27;</span>,ascending=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列名重命名</span></span><br><span class="line"><span class="comment"># y -&gt; year</span></span><br><span class="line">df.rename(columns = &#123;<span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;year&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按索引排序</span></span><br><span class="line">df.sort_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置DataFrame的索引为行号，原索引变为普通列</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除特定列</span></span><br><span class="line">df.drop(columns=[<span class="string">&#x27;Length&#x27;</span>,<span class="string">&#x27;Height&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="添加新列或者新行"><a href="#添加新列或者新行" class="headerlink" title="添加新列或者新行"></a>添加新列或者新行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">in</span> [<span class="number">2</span>]: data = pd.DataFrame(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]), columns=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="keyword">in</span> [<span class="number">3</span>]: data</span><br><span class="line">out[<span class="number">3</span>]:</span><br><span class="line"> a b c</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新列</span></span><br><span class="line"><span class="comment"># simple</span></span><br><span class="line">data[<span class="string">&#x27;d&#x27;</span>] = <span class="number">0</span> <span class="comment"># or give a new serie like [3,2,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use loc </span></span><br><span class="line">data.loc[:, <span class="string">&#x27;d&#x27;</span>] = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># use concat 添加多个列</span></span><br><span class="line">newColDf = pd.DataFrame(&#123;<span class="string">&quot;d&quot;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],<span class="string">&quot;e&quot;</span>:[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]&#125;)</span><br><span class="line">data = pd.concat([data, newColDf], axis=<span class="number">1</span>,ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新行</span></span><br><span class="line"><span class="comment"># use loc </span></span><br><span class="line">data.loc[<span class="number">4</span>] = <span class="number">0</span> <span class="comment"># or give a new serie like [3,2,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use append 一次多行</span></span><br><span class="line">data.append(pd.DataFrame([[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]],columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]), ignore_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从list添加 use list of dict</span></span><br><span class="line">cols = [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">df = pd.DataFrame(columns = cols)</span><br><span class="line"></span><br><span class="line">dict_list = [</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;testname1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;testname2&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">df = df.append(dict_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按行或者列取得dataframe子集"><a href="#按行或者列取得dataframe子集" class="headerlink" title="按行或者列取得dataframe子集"></a>按行或者列取得dataframe子集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选满足逻辑表达式的数据</span></span><br><span class="line">df[df[<span class="string">&#x27;Length&#x27;</span>] &gt; <span class="number">7</span>]</span><br><span class="line">df[(df[<span class="string">&#x27;col1&#x27;</span>] &gt; <span class="number">120</span>)&amp;(df[<span class="string">&#x27;col2&#x27;</span>]&lt;<span class="number">200</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除重复行 (仅考虑列)</span></span><br><span class="line">df.drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择前n行 或 后n行</span></span><br><span class="line">df.head(n)</span><br><span class="line">df.tail(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行选取行</span></span><br><span class="line">df.iloc[<span class="number">10</span>:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取指定的多列</span></span><br><span class="line">df[[<span class="string">&#x27;width&#x27;</span>,<span class="string">&#x27;length&#x27;</span>,<span class="string">&#x27;species&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取指定的单列</span></span><br><span class="line">df[<span class="string">&#x27;width&#x27;</span>] <span class="keyword">or</span> df.width</span><br></pre></td></tr></table></figure><h2 id="dataframe-拼接"><a href="#dataframe-拼接" class="headerlink" title="dataframe 拼接"></a>dataframe 拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 行拼接</span></span><br><span class="line">pd.concat([df1,df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列拼接</span></span><br><span class="line"><span class="comment"># DataFrames的列拼接</span></span><br><span class="line">pd.concat([df1,df2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="两个dataframe-join，类似table-join"><a href="#两个dataframe-join，类似table-join" class="headerlink" title="两个dataframe join，类似table join"></a>两个dataframe join，类似table join</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Spyder Editor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Dies ist eine temporäre Skriptdatei.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;key1&quot;</span>: [<span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K1&quot;</span>, <span class="string">&quot;K2&quot;</span>],</span><br><span class="line">            <span class="string">&quot;key2&quot;</span>: [<span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K1&quot;</span>, <span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K1&quot;</span>],</span><br><span class="line">            <span class="string">&quot;A&quot;</span>: [<span class="string">&quot;A0&quot;</span>, <span class="string">&quot;A1&quot;</span>, <span class="string">&quot;A2&quot;</span>, <span class="string">&quot;A3&quot;</span>],</span><br><span class="line">            <span class="string">&quot;B&quot;</span>: [<span class="string">&quot;B0&quot;</span>, <span class="string">&quot;B1&quot;</span>, <span class="string">&quot;B2&quot;</span>, <span class="string">&quot;B3&quot;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">right = pd.DataFrame(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;key1&quot;</span>: [<span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K1&quot;</span>, <span class="string">&quot;K1&quot;</span>, <span class="string">&quot;K2&quot;</span>],</span><br><span class="line">            <span class="string">&quot;key2&quot;</span>: [<span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K0&quot;</span>, <span class="string">&quot;K0&quot;</span>],</span><br><span class="line">            <span class="string">&quot;C&quot;</span>: [<span class="string">&quot;C0&quot;</span>, <span class="string">&quot;C1&quot;</span>, <span class="string">&quot;C2&quot;</span>, <span class="string">&quot;C3&quot;</span>],</span><br><span class="line">            <span class="string">&quot;D&quot;</span>: [<span class="string">&quot;D0&quot;</span>, <span class="string">&quot;D1&quot;</span>, <span class="string">&quot;D2&quot;</span>, <span class="string">&quot;D3&quot;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># inner join, default is inner</span></span><br><span class="line">result = pd.merge(left, right, how=<span class="string">&quot;inner&quot;</span>, on=[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># above is same as </span></span><br><span class="line">result = pd.merge(left, right, on=[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># left join </span></span><br><span class="line">result = pd.merge(left, right, how=<span class="string">&quot;left&quot;</span>, on=[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># right join</span></span><br><span class="line">result = pd.merge(left, right, how=<span class="string">&quot;right&quot;</span>, on=[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># outer join</span></span><br><span class="line">result = pd.merge(left, right, how=<span class="string">&quot;outer&quot;</span>, on=[<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="汇总函数"><a href="#汇总函数" class="headerlink" title="汇总函数"></a>汇总函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>()</span><br><span class="line">count() <span class="comment"># 统计non-na的个数</span></span><br><span class="line">median() </span><br><span class="line">quantile() <span class="comment"># 计算p分位数</span></span><br><span class="line">apply(function) <span class="comment"># 将传入函数作用于每个对象</span></span><br><span class="line"><span class="built_in">min</span>()</span><br><span class="line"><span class="built_in">max</span>()</span><br><span class="line">mean()</span><br><span class="line">var() <span class="comment"># 方差</span></span><br><span class="line">std() <span class="comment"># 标准差</span></span><br></pre></td></tr></table></figure><h2 id="处理缺失-NaN"><a href="#处理缺失-NaN" class="headerlink" title="处理缺失 NaN"></a>处理缺失 NaN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去掉含有NA值的行</span></span><br><span class="line">df.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有的NA/null值替换为value</span></span><br><span class="line">df.fillna(value)</span><br></pre></td></tr></table></figure><h2 id="判断dataframe是否为空"><a href="#判断dataframe是否为空" class="headerlink" title="判断dataframe是否为空"></a>判断dataframe是否为空</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(cols=[<span class="string">&#x27;test&#x27;</span>]) </span><br><span class="line">df.empty</span><br></pre></td></tr></table></figure><h2 id="“Unnamed-0”-in-DataFrame"><a href="#“Unnamed-0”-in-DataFrame" class="headerlink" title="“Unnamed:0” in DataFrame"></a>“Unnamed:0” in DataFrame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&#x27;df.csv&#x27;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="dataframe行数"><a href="#dataframe行数" class="headerlink" title="dataframe行数"></a>dataframe行数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
